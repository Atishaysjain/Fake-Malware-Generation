import tensorflow as tf
from tensorflow.keras import layers, models, optimizers

    
# Generator Model
def build_generator():
    model = models.Sequential([
        layers.Input(shape=(768,)),
        layers.Reshape((768, 1)),
        layers.Conv1D(64, kernel_size=3, padding='same'),
        layers.LeakyReLU(alpha=0.2),
        layers.BatchNormalization(momentum=0.8),
        layers.Conv1D(32, kernel_size=3, padding='same'),
        layers.LeakyReLU(alpha=0.2),
        layers.BatchNormalization(momentum=0.8),
        layers.Conv1D(16, kernel_size=3, padding='same'),
        layers.LeakyReLU(alpha=0.2),
        layers.BatchNormalization(momentum=0.8),
        layers.Flatten(),
        layers.Dense(768),
        layers.Activation('tanh')
    ])
    return model

# Critic (Discriminator) Model
def build_critic():
    model = models.Sequential([
        layers.Input(shape=(768, 1)),
        layers.Conv1D(64, kernel_size=3, padding='same'),
        layers.LeakyReLU(alpha=0.2),
        layers.Conv1D(128, kernel_size=3, padding='same'),
        layers.LeakyReLU(alpha=0.2),
        layers.Conv1D(256, kernel_size=3, padding='same'),
        layers.LeakyReLU(alpha=0.2),
        layers.Flatten(),
        layers.Dense(1)
    ])
    return model
