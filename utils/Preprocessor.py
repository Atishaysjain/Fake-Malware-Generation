from transformers import DistilBertTokenizer, TFDistilBertModel
import tensorflow as tf
import numpy as np
import os

class Encoder:
    def __init__(self, model_name='distilbert-base-uncased'):
        self.tokenizer = DistilBertTokenizer.from_pretrained(model_name)
        self.model = TFDistilBertModel.from_pretrained(model_name)

    def encode(self, text, max_length=400):
        inputs = self.tokenizer(text, return_tensors="tf", max_length=max_length, truncation=True, add_special_tokens=True)
        outputs = self.model(inputs)
        cls_embedding = outputs.last_hidden_state[:, 0, :]
        return cls_embedding

class FileManager:
    @staticmethod
    def read_text_from_file(file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read().replace('\n', ' ')

    @staticmethod
    def save_embeddings(output_dir, tensor_embedding, malware_sample_names):
        np.save(os.path.join(output_dir, 'tensor_embedding.npy'), tensor_embedding.numpy())
        with open(os.path.join(output_dir, 'malware_sample_names.txt'), 'w') as file:
            for name in malware_sample_names:
                file.write("%s\n" % name)

class EmbeddingScaler:
    @staticmethod
    def scale_embeddings(embeddings):
        scaled_embeddings = 2. * (embeddings - tf.reduce_min(embeddings)) / (tf.reduce_max(embeddings) - tf.reduce_min(embeddings)) - 1
        return scaled_embeddings

class Preprocessor:
    def __init__(self, encoder: Encoder, file_manager: FileManager, scaler: EmbeddingScaler):
        self.encoder = encoder
        self.file_manager = file_manager
        self.scaler = scaler

    def process_samples(self, input_dir, output_dir):
        embedding_list = []
        malware_sample_names = []

        for file in os.listdir(input_dir):
            sample_name = file.split(".")[0]
            malware_sample_names.append(sample_name)

            file_path = os.path.join(input_dir, file)
            text = self.file_manager.read_text_from_file(file_path)
            cls_embedding = self.encoder.encode(text)
            scaled_embedding = self.scaler.scale_embeddings(cls_embedding)
            embedding_list.append(scaled_embedding)

        tensor_embedding = tf.concat(embedding_list, axis=0)
        self.file_manager.save_embeddings(output_dir, tensor_embedding, malware_sample_names)

        return tensor_embedding

