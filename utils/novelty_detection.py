import numpy as np
from sklearn.model_selection import cross_val_score
from sklearn.svm import OneClassSVM
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor
from sklearn.model_selection import KFold, GridSearchCV
from sklearn.metrics import make_scorer
from sklearn.metrics import accuracy_score


class NoveltyDetectionClassifier:

    def __init__(self, model, param_grid):
        print("class being initalized")
        self.model = model
        self.param_grid = param_grid
        self.scorer = make_scorer(self.custom_scorer, greater_is_better=True)

    @staticmethod
    def custom_scorer(y_true, y_pred):
        # Assuming the true labels are -1 for outliers and 1 for inliers
        return accuracy_score(y_true, y_pred)
    
    def grid_search_cv_real_data(self, real_data):
        self.grid_search = GridSearchCV(self.model, self.param_grid, scoring=self.scorer, cv=5)
        y_train_dummy = np.ones(len(real_data))
        self.grid_search.fit(real_data, y_train_dummy)
        return self.grid_search
    
    def evaluate_on_generated_test_data(self, fake_data):
        if not self.grid_search:
            raise ValueError("Grid search not performed. Call perform_grid_search_cv first.")
        best_estimator = self.grid_search.best_estimator_
        y_pred = best_estimator.predict(fake_data)
        y_true = np.full(len(y_pred), -1)
        evaluation_score = self.custom_scorer(y_true, y_pred)
        print(f"Evaluation Score on Test Data: {evaluation_score}")
        return evaluation_score

