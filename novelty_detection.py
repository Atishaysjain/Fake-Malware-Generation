import os
import numpy as np
from sklearn.svm import OneClassSVM
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor
from sklearn.model_selection import KFold
import matplotlib.pyplot as plt

def evaluate_model_on_generated_data(model, X_train, X_test):

    model.fit(X_train)

    X = np.r_[X_train, X_test] # concatenate real_embedding and generated_embedding
    n_outliers = len(X_test)
    ground_truth = np.ones(len(X), dtype=int)
    ground_truth[-n_outliers:] = -1

    y_pred = model.predict(X)
    # Assuming -1 for outliers, 1 for inliers in y_pred
    correct_predictions = (ground_truth == y_pred).sum()
    score = correct_predictions / len(ground_truth)  # Accuracy: (TP + TN) / (TP + TN + FP + FN)
    return score


def evaluate_model_on_combined_data(model, X_train, X_test):
    model.fit(X_train)
    y_pred = model.predict(X_test)
    # Assuming -1 for outliers, 1 for inliers in y_pred
    score = list(y_pred).count(-1) / len(y_pred)    # Novelty Detection Rate: (TN) / (TN + FP)
    return score

def novelty_detection_models(real_embedding, generated_embedding, sample_name):

    ocsvm = OneClassSVM(gamma='scale', kernel='sigmoid', nu=0.5)
    score_ocsvm_generated_data = evaluate_model_on_generated_data(ocsvm, real_embedding, generated_embedding)
    score_ocsvm_combined_data = evaluate_model_on_combined_data(ocsvm, real_embedding, generated_embedding)
    
    isolation_forest = IsolationForest()
    score_isolation_forest_generated_data = evaluate_model_on_generated_data(isolation_forest, real_embedding, generated_embedding)
    score_isolation_forest_combined_data = evaluate_model_on_combined_data(isolation_forest, real_embedding, generated_embedding)

    lof = LocalOutlierFactor(n_neighbors=20, algorithm='auto', contamination='auto', novelty = True)
    score_lof_generated_data = evaluate_model_on_generated_data(lof, real_embedding, generated_embedding)
    score_lof_combined_data = evaluate_model_on_combined_data(lof, real_embedding, generated_embedding)

    print(f"One-Class SVM (TN) / (TN + FP) score ({sample_name}): {score_ocsvm_generated_data:.2f}")
    print(f"One-Class SVM accuracy - (TP + TN) / (TP + TN + FP + FN score ({sample_name}): {score_ocsvm_combined_data:.2f}")

    print(f"Isolation Forest (TN) / (TN + FP) score ({sample_name}): {score_isolation_forest_generated_data:.2f}")
    print(f"Isolation Forest accuracy - (TP + TN) / (TP + TN + FP + FN score ({sample_name}): {score_isolation_forest_combined_data:.2f}")

    print(f"Local Outlier Factor (TN) / (TN + FP) score ({sample_name}): {score_lof_generated_data:.2f}")
    print(f"Local Outlier Factor accuracy - (TP + TN) / (TP + TN + FP + FN score ({sample_name}): {score_lof_combined_data:.2f}")



if __name__ == '__main__':

    winwebsec_original_embeddings = np.load(os.path.join(os.getcwd(), "distelBERT_embeddings/Malicia (Big 3 - Opcodes)/winwebsec/tensor_embedding.npy"))
    winwebsec_fake_embeddings = np.load(os.path.join(os.getcwd(), "intermediary_malware_winwebsec/intermediary_malware_samples_epoch_500.npy"))

    print(winwebsec_original_embeddings.shape, winwebsec_fake_embeddings.shape)

    zbot_original_embeddings = np.load(os.path.join(os.getcwd(), "distelBERT_embeddings/Malicia (Big 3 - Opcodes)/zbot/tensor_embedding.npy"))
    zbot_fake_embeddings = np.load(os.path.join(os.getcwd(), "intermediary_malware_zbot/intermediary_malware_samples_epoch_500.npy"))

    print(zbot_original_embeddings.shape, zbot_fake_embeddings.shape)

    zeroacces_original_embeddings = np.load(os.path.join(os.getcwd(), "distelBERT_embeddings/Malicia (Big 3 - Opcodes)/zeroaccess/tensor_embedding.npy"))
    zeroacces_fake_embeddings = np.load(os.path.join(os.getcwd(), "intermediary_malware_zeroaccess/intermediary_malware_samples_epoch_500.npy"))

    print(zeroacces_original_embeddings.shape, zeroacces_fake_embeddings.shape)

    print("\nNovelty Detection for Winwebsec data:")
    novelty_detection_models(winwebsec_original_embeddings, winwebsec_fake_embeddings,  "Winwebsec")

    print("\nNovelty Detection for Zbot data:")
    novelty_detection_models(zbot_original_embeddings, zbot_fake_embeddings, "Zbot")

    print("\nNovelty Detection for ZeroAccess data:")
    novelty_detection_models(zeroacces_original_embeddings, zeroacces_fake_embeddings, "ZeroAccess")